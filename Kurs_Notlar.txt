				
/* Not **
Mikrodenetleyicileri register düzeyinde kodlanabilmesi için öncelikle registerları genel anlamda tanımak gerekmektedir.
Herhnagi bir gpio,timer,spi,uart çevre birimini konfigure edebilmek için dikkat edilmesi gerekenler şunlardır.

Öncelikle ilgli birimin clock hattının aktifleştirilmesi gerekmektedir. Bu hat aktifleştirilmez ise yapılan tüm ayarlar
boşuna olur. Daha sonra ilgili çevre biriminin konfigürasyon ayarları yapılarak en son aşamada
ilgli hat enable edilir. Eğer interrup modda kullanılacak ise yşne gerekli ayarlamalar yapılarak hattın interrup modu aktifleştirilir
daha sonra arm cortex yapısı içerisinde bulunann nvic_line aktifleştirilir. En son denetleyici icerisinde exti registerlarında interrup modu 
ayarlanarak call_back fonksiyonları cagirilir.
*/ **



/*				GPIO.H Kutuphanesi Yapılandırılması			*/


ÖNCELİKLE GPIO REGISTERLARINI İNCELEYEREK BAŞLAYALIM. ST FİRMASI REGİSTER ADRESLERİ ARASINDA 4 BYTE UZUNLUĞUNDA OFFSETLER BIRAKARAK
ADRESLEME YAPMIŞTIR.BU ADRESLEMEDEN FAYDALANARAK BİR STRUCT İÇERİSİNDE uint32_t VERİ TÜRÜNDEN DEGISKENLER OLUSTURARAK BU REGISTERLAR
ÜZERİNDE İŞLEMLER YAPMAYI KOLAYLAŞTIRALIM. SONRASINDA REGİSTERLARI İNCELEYEREK KULLANIMLARINI ÖĞRENELİM
MODER REGİSTERI 4 TİP MODE AYARI YAPMAYI SAĞLAMAKTADIR.BU MODE AYARLARI İLGİLİ GPIO HATTINI;
-> INPUT -> OUTPUT -> ALTERNATE FUNCTION -> ANALOG OLARAK AYARLAMAMIZI SAĞLAMAKTADIR.

MODER REGISTERİNİ İNCELEDİĞİMİZDE HER BİR PORT İCİN 2 BİTLİK DEĞER ALABİLMEKTEDİR. BİZ BU DEĞERLERİ DEĞİŞTİRMEK
İSTEDİĞİMİZDE ÖNCELİKLE İLGİLİ YERLERİ TEMİZLEMEMİZ GEREKMETEDİR. **NOT -> REGİSTER ÜZERİNDE DEĞİŞİKLİK YAPMAK
HER ZAMAN RİSKLİ BİR DURUM OLMUŞTUR. BUNUN İÇİN REGİSTERDA Kİ DEĞERİ TEMP BİR DEĞERE ATAYARAK GEREKLİ AYARLAMALARI
YAPABİLİR. ARDINDAN TEKRARDAN İLGLİ REGİSTERA TEMP DEĞERİNİ VEREBİLİRZ. BU YÖNTEM DAHA GÜVENLİ OLACAKTIR.**

DİĞER BIR REGISTER OTYPE REGISTERIDIR. BU REGISTER SECİLEN GPIO HATTININ PUSH PULL MU YOKSA OPENDRAİN MI OLACAĞINI
BELİRLER. TEK BİTLİK BİR DEGER ALIR (0-1).
PUPDR REGISTER-> BU REGISRER SECİLEN GPIO HATTININ PULL-UP VEYA PULL-DOWN OLMASINI CONFİGURE EDER. 
00->NO PULL-UP*DOWN 01 PULL UP 02 PULL DOWN
GPIO SPEED MODE REGISTERI HATTIN LOW-MEDIUM-HIGH VERY HIGH SPEED GIBI DEGERLERLE GPIO NUN HIZINI AYARLAR
*UNUTMAYALIM Kİ NE KADAR HIZ O KADAR ENERJİ TÜKKETİMİ.
SON OLARAK AFSEL->(ALTERNA FUNCTION SELECTION) EN ONEMLİ REGISTERLARDAN BIRISIDIR. 
BU REGISTRER İLE GPIO NUN UART,I2C,SPI GBII DURUMLARDA CALISMASINI KONFIGURE ETMEYI SAĞLAMAKTADIR.
REGISTERLARI TANIDIKTAN SONRA KULLANICIYA BIR STRUCTER HAZIRLAMALIYIZ. BU STRUCT SAYESİNDE KULLANICI GPIO AYARLARINI 
GIREREK GPIO_INIT FONKSİYONUNA BU STRUCTER I VERSIN Kİ İLGİLİ HAT KONFİGURE OLSUN.VERECEĞIMIZ STRUCT YAPISI İÇERSINDE Kİ
DEGISKENLERE MACROLAR VEYA ENUM YAPILARI TANIMLAMAYI IHMAL ETMEYELİM. BU SAYEDE KULLANICI BIZİM İSTEDİĞİMZ DEGERLERİ UYGUN
ŞEKİLDE GİREBİLSİN.

GPIO_INIT()-> BU FONKSİYON KULLANICDAN İLGİLİ GPIO HATTINI VE HAT İLE İLGİLİ STRUCTER DEGISKENINI GIRMESINI BEKLER
BU SAYEDE GIRDIGI GPIO İLE İLGLİ AYARLARI VERİLEN STRUCT DOĞRULTUSUNDA ARKA PLANDA HAZIRLANMASINI SAĞLAR.
STRUCTER ICERISINDE PIN NUMARASI PİN MODE(IN-OUT) OTYPE, PULL -UP*DOWN SPEED VE ALTERNATE GİBİ DURUMLARI GİRECEK.

ONCEKİKLE GIRILEN PIN NUMARASI 2 LİK SAYI SİSTEMİNE GÖRE VERİLMEKTEDİR. BUNUN SEBEBİ REGISTER ÜZERİNE YAZMA
İŞLEMİ YAPARKEN BU ŞEKİLDE TANIMLANMASIDIR. BIR FOR DONGUSU İCERİSNDE 0-15 E KADAR 1 SAYISININ SOLA KAYDIRARAK GIRILEN
PIN NUMARASI İLE ANDLERSEK 0-15 ARASI GIRILEN DEGERI BULABİLİLİR (KISACA 2 LİK TABANDA LOG ALMA İŞLEMİ). BU DEGER İLE 
MODER REGISTERINDA ONCEİLKLE INPUT MU OUTPUT MU KONTROLÜ SORGULANIR. EGER OUPUT VEYA AFSEL OLARAK GİRİLMİS İSE TYPE OTYPE
VE OSPEED REGISTERLARI KONFİGURE EDİLİR. 


void GPIO_WritePin(GPIO_Typedef_t *GPIOx, uint16_t pinNumber, GPIO_PinState_t pinState )

BU FONKSİYON İLE İLGİ GPIO PORTUNA 0 VEYA 1 DEGERLERİ YAZILIR. BUNNU ARKA PLANDA BSRR REGISTERI YARDIMI İLE YAPABİLİR.
KULLANICININ GIRDIGI PIN SET VEYA PIN RESET DEGERLERİNE GÖRE BSRR REGISTERININ 0-15 BİTLERİ İLE SETLEME 16-31 BİTLERİ İLE RESETLEME YAPILIR.


GPIO_PinState_t GPIO_ReadPin(GPIO_Typedef_t* GPIOx, uint16_t pinNumber)

INPUT DATA REGISTER -> İLGLİ GPIO PORTUNNDA Kİ DEGERİ OKUYARAK 0-1 BİLGİLİSİNİ DÖNDÜRÜR.



void GPIO_LockPin(GPIO_Typedef_t* GPIOx, uint16_t pinNumber)
void GPIO_TogglePin(GPIO_Typedef_t* GPIOx, uint16_t pinNumber)



#include "stm32l476xx.h"
#include "GPIO.h"
#include "string.h"


static void GPIO_LedConfig();

int main(void)
{
/* PA5*/
	GPIO_LedConfig();
//PC13
	while(1){
		while(GPIO_Pin_Reset == GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
			GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_Pin_Set);
		}
		GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_Pin_Reset);

	}

}
static void GPIO_LedConfig(){

	RCC_GPIOA_CLK_ENABLE();
	RCC_GPIOC_CLK_ENABLE();

	GPIO_InitTypedef_t GPIO_Led = {0};
	GPIO_Led.pinNumber = GPIO_PIN_5;
	GPIO_Led.Mode = GPIO_MODE_OUTPUT;
	GPIO_Led.Speed = GPIO_SPEED_LOW;
	GPIO_Led.Otype = GPIO_OTYPE_PP;
	GPIO_Led.PuPd = GPIO_PUPD_NOPULL;
	GPIO_Led.Alternate = 0;
	GPIO_Init(GPIOA, &GPIO_Led);

	memset(&GPIO_Led, 0, sizeof(GPIO_Led));
	GPIO_Led.pinNumber = GPIO_PIN_13;
	GPIO_Led.Mode = GPIO_MODE_INPUT;
	GPIO_Led.PuPd = GPIO_PUPD_PULL_UP;
	GPIO_Led.Alternate = GPIO_AFSEL_12;
	GPIO_Init(GPIOC,&GPIO_Led);

}

/*				INTERRUPT KURS NOTLAR			*/

ONCELİKLE HATTI AKTIF ETMEK GEREKİR RCC_ENR REGISTER ÜZERİNDEN
EXTERNAL INTERRUPT OKUMAKK ICIN GPIO INPUT MODDA OLMALI
BUTTON TARZI INPUT MODDAKİ YAPILARDA PIN FLOATING MODDADIR. BU YÜZDEN MOD AYARI YAPILARAK
HATTAKI PARAZITLENMELERİN ÖNÜNCE GECİLMELİ(* NET OLARAK 0 - 1 DURUMU TESPITI ICIN) PULL-UP YA DAPULL-DOWN YAPILIR
 

INTERRUPT ASAMALARI
1-> SYSTEM-CONFIG(PORT CONFIG)
2-> EXTI->CONFIG(UNMASK AND TRIGGER SELECTION)
3-> NVIC->ARM(MPU)(CALL-BACK)

SYSTEM-CONFIG ALTINDA EXTILINE REGISTERLARI ÜZERİNDE 4 REGISTER VARDIR
EXTICR0-4 HER BIR REGISTER ICERISINDE 4 ADET EXTI_LINE TUTAT VE TOTALDE 15 ADET EXTI BULUNUR
BUNU AYIRT ETMEK ICIN EXTILINE_NUMBER KULLANICIDAN ALINIR VE 10 GIRILMESI DURUMUNDA EXTI3 E BAKILMASI
GEREKTIGI EXTILINE_NUMBER/4 = 2+1(1DEN BASLADIGI ICIN) SONUCUNUN 4 ILE CARPIMINDAN BULUNUR ERISILIR
UYGUN BIT ISE EXTILINE_NUMBER%4(EXTILINE_NUMBER & 0011) ILE BULUNUR
BULUNAN BIT ADRESI TEMIZLENIR VE UYGUN DEGER(PORT_SOURCE) YAZILIR.

EXTI-CONFIG
EVENT MI INTERRUPT MI GIRILEN MOD DEGERI (REGISTER OFFSET ADRESLERI UZERINDEN) BAKILIR
UYGUN REGISTERA POINTER ARITMETIIGI ILE ERISILIR VE UYGUN DEGER YAZILIR

NVIC->IRQNumber 
ARM-CORTEX_M4 USER GUIDE UZERINDEN INTERRUPT-SET-ENABLE-REGISTER ERISILIR
BURDAKI ISLEMLER IRQNumber degerlerine göre konfigüre edilir


*/

INTERRUPT REGISTER
/* Bu fonksiyon ile ilgi portun ilgili pinini konfigüre edilebilir ex-> PC[7] -> 	EXTI_LineConfig(EXTI_Port_Source_GPIOC, EXTI_LineSource_7); */

void EXTI_LineConfig(uint8_t Port_Source, uint8_t EXTI_LineSource)
{
	uint32_t temp ;
	temp = SYSCFG->EXTICR[EXTI_LineSource >> 2U]; /* EXTIx bul oku */
	temp = ~(0xFU << ((EXTI_LineSource & 0x3U) << 2)); /*	EXTIx içinde uygun bitleri temizle mod3 * 4 ile	*/
	temp = (Port_Source << ((EXTI_LineSource & 0x3U) << 2 ) );	/* kullanıcının değerini uygun bitlere yaz */
	SYSCFG->EXTICR[EXTI_LineSource >> 2U] = temp;	/* temp değeri register a yaz */
}



NVIC IRQ NUMBER
NVIC içerisinde ISER REGISTERLARI bulunmaktadır. herbir ISERx 32 bit yani 32 line 
tutuyor. Hangi ISERx e yazacağımızı gelen liine değerini 32 ile bölersek ISERx değeri bulunur
bulunan değer pointer aritmetiği ile adres üzerine eklenir ve işlem yapılır.
IRQnumber değerinin 0x11111 -> 0x1f ile and lenirse modu alınır ve kaçınıncı bite yazılacağı bulunur
Oncesinde değer okunur ilgili registerdan daha sonra ilgili bölüm temizlenir ve tekrardan ilgili değer yazılır.

void NVIC_EnableInterrupt(uint8_t IRQnumber)
{
	uint32_t temp = 0;
	temp = *( (IRQnumber >> 5U) + NVIC_ISER0 );
	temp &= ~(0x1U << (IRQnumber & 0x1FU) );
	temp |= (0x1U << (IRQnumber & 0x1FU) );
	*( (IRQnumber >> 5U) + NVIC_ISER0 ) = temp;
}




								/* ornek */
													
													

#include "stm32l476xx.h"
#include "GPIO.h"
#include "string.h"
#include "EXTI.h"
#include "RCC.h"

static void GPIO_LedConfig();
static void GPIO_ButtonInterruptConfig();

void EXTI15_10_IRQHandler()
{
	if( 0 != ( EXTI->PR1 & (1<<13U) ) )
	{
		EXTI->PR1 |= ( 0x1 << 13U);
		GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_Pin_Set);
	}
}
int main(void)
{

/* PA5*/
//PC13

	GPIO_LedConfig();

	GPIO_ButtonInterruptConfig();

	while(1){;}

}
static void GPIO_LedConfig(){

	RCC_GPIOA_CLK_ENABLE();
	RCC_GPIOC_CLK_ENABLE();

	GPIO_InitTypedef_t GPIO_Led = {0};
	GPIO_Led.pinNumber = GPIO_PIN_5;
	GPIO_Led.Mode = GPIO_MODE_OUTPUT;
	GPIO_Led.Speed = GPIO_SPEED_LOW;
	GPIO_Led.Otype = GPIO_OTYPE_PP;
	GPIO_Led.PuPd = GPIO_PUPD_NOPULL;
	GPIO_Led.Alternate = 0;
	GPIO_Init(GPIOA, &GPIO_Led);

	memset(&GPIO_Led, 0, sizeof(GPIO_Led));

	GPIO_Led.pinNumber = GPIO_PIN_13;
	GPIO_Led.Mode = GPIO_MODE_INPUT;
	GPIO_Led.PuPd = GPIO_PUPD_PULL_UP;
	GPIO_Init(GPIOC,&GPIO_Led);
}

static void GPIO_ButtonInterruptConfig()
{
	EXTI_InitTypedef_t EXTI_Init_t = {0};
	RCC_SYSCFG_CLK_ENABLE();
	EXTI_LineConfig(EXTI_Port_Source_GPIOC, EXTI_LineSource_13);

	EXTI_Init_t.EXTI_LineCmd = ENABLE;
	EXTI_Init_t.EXTI_LineNumber = EXTI_LineSource_13;
	EXTI_Init_t.EXTI_Mode = EXTI_MODE_Interrupt;
	EXTI_Init_t.TriggerSelection = EXTI_Trigger_Falling;

	EXTI_Init(&EXTI_Init_t);
	NVIC_EnableInterrupt(EXTI15_10_IRQNumber);
}




		/*						SPI NOTLAR						*/

Seri haberleşme protokolüdür. Kart üzerindeki sensörler ile (yakın mesafe) çok hızlı haberleşir
DATA Hattı işlemcinin 80 MHZ ise  40 mhz hızına kadar ulaşabilir.
Senkron haberleşme protokolüdür. FULL DUPLEX(aynı anda veri yollarken veri alabilir ). CLOCK ile haberleşme sağlar.

MASTER ortak clock hattondan slavelere bağlanır.

SPI içerisinde clock hattının her bir darbesinde shif registerları ile kaydırma işlemi yapar.
DAMI BYTE -> APTAL BYTE


CHIP Select -> Haberleşmeyi baslatır(Slave Seçilir.)
Clock Cycle  -> 8 cycle da 1 byte veri shif edilir.

CLOCK PHASE First -> 0 ise 1. kenarda, 1 ise 2. kenarda sample yapar. 
CLOCK IDLE STATE POLARITY LOW -> 0 ise hiçbir veri akmazken clock low durumda 1 ise hiçbir veri akmazken high durumda..


SPI KONFİGÜRASYONU İCİN KULLANICIYA AYNI GPIO CEVRE BIRIMINDA OLDUGU GİBİ BİR HANDLE VERİLİR.
BU HANDLE İCERİSİNDE GPIO DAN FARKLI BİR YONTEM UYGULANIR. BU HANDLE ICERISINDE INSTANCE YANI HANGI 
SPI(SPI1-SPI2-SPI3) GIBI SECIM YAPILIR. Init verisi SPI_InitTypedef_t TÜRÜNDEN KULLANICININ GEREKLİ
AYARLAMALARI YAPACAGI VERİLERİ TUTAR VE KULLANICI SADECE BU İKİ STRUCTURE DOLDURARAK AYARLAMALARI YAPAR.
SPI HABERLESMESİNDE GELEN VE GİDEN DATALARI VE BOYUTLARINI HANDLE İCERİSİNDE TUTULUR. BU SAYEDE GELEN VE 
GİDEN DATALARI GLOBALE CEKEREK BASKA FONKSİYONLARADA İLETİBİLMESİNİ SAĞLAR. AYRICA SPI CEVRE BİRİMİNDE VERİ 
HATTININ VERİYİ GÖNDERMEYE UYGUN OLUP OLMADIĞINI VEYA HALEN VERİ GÖNDERİM DURUMUNDA OLMASI DURUMLARINI KONTROL
EDEBİLMEK AMACI İLE BUS_TX VE BUS_RX DEGISKENLERİ İLE DURUMUN KONTROLÜ SAĞLANIR. SON OLARAK INTERRUP HANDLER FONKYİONU ICIN
YÖNLENDİRMELER /*void(*TxISRFunction)(struct __SPI_HandleTypedef_t *handle)*/ FONKSİYON POİNTERLARI İLE SAĞLANIR.
KULLANICININ GİRDİĞİ MODA VE VERİ İLETİM BOYUTUNA BAĞLI OLARAK BU FONKYİON AYARLANMASI SAĞLANIR. BU SAYEDE ARKA PLANDA İŞİ YAPARAK
KULLANICIYA SADECE INTERRUPT GELDİĞİ ANDA YAPTIRACAĞI ÖZEL DURUMLAR KALMIŞ OLUR.


						/* SPI ORNEK KOD ARDUINO SLAVE-MASTER */


#include "stm32l476xx.h"
#include "string.h"
#include "GPIO.h"
#include "EXTI.h"
#include "RCC.h"
#include "SPI.h"

static void GPIO_LedConfig();
static void GPIO_ButtonInterruptConfig();
static void SPI_Config();
static void SPI_GPIO_Config();

SPI_HandleTypedef_t handle ;


void EXTI15_10_IRQHandler()
{
	char msgToSend [] = "Hi I'm Mert!\n";

	if( ( EXTI->PR1 & (1 << 13U) ) )
	{
		EXTI_Clear_Interrupt(EXTI_LineSource_13);
		//GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_Pin_Reset);
		SPI_TransmitData(&handle, (uint8_t*)msgToSend, strlen(msgToSend));
		//GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_Pin_Set);
	}
}
int main(void)
{

/* PA5*/
//PC13

	GPIO_LedConfig();

	GPIO_ButtonInterruptConfig();

	SPI_GPIO_Config();

	SPI_Config();

	while(1){;}

}
static void GPIO_LedConfig(){

	RCC_GPIOA_CLK_ENABLE();
	RCC_GPIOC_CLK_ENABLE();
	GPIO_InitTypedef_t GPIO_Led = {0};

	GPIO_Led.pinNumber = GPIO_PIN_4;
	GPIO_Led.Mode = GPIO_MODE_OUTPUT;
	GPIO_Led.Speed = GPIO_SPEED_LOW;
	GPIO_Led.Otype = GPIO_OTYPE_PP;
	GPIO_Led.PuPd = GPIO_PUPD_NOPULL;

	GPIO_Init(GPIOA, &GPIO_Led);


	memset(&GPIO_Led, 0, sizeof(GPIO_Led));

	GPIO_Led.pinNumber = GPIO_PIN_13;
	GPIO_Led.Mode = GPIO_MODE_INPUT;
	GPIO_Led.PuPd = GPIO_PUPD_PULL_UP;
	GPIO_Init(GPIOC,&GPIO_Led);
}

static void GPIO_ButtonInterruptConfig()
{
	EXTI_InitTypedef_t EXTI_Init_t = {0};
	RCC_SYSCFG_CLK_ENABLE();
	EXTI_LineConfig(EXTI_Port_Source_GPIOC, EXTI_LineSource_13);

	EXTI_Init_t.EXTI_LineCmd = ENABLE;
	EXTI_Init_t.EXTI_LineNumber = EXTI_LineSource_13;
	EXTI_Init_t.EXTI_Mode = EXTI_MODE_Interrupt;
	EXTI_Init_t.TriggerSelection = EXTI_Trigger_Falling;

	EXTI_Init(&EXTI_Init_t);
	NVIC_EnableInterrupt(EXTI15_10_IRQNumber);
}

void SPI_Config(){

	handle.Instance = SPI1; /* PA4->NSS PA5->SCK PA6->MISO PA7->MOSI */
	RCC_SPI1_CLK_ENABLE();

	handle.Init.BaudRate = SPI_BAUDRATE_DIV_32;
	handle.Init.Bus_Config = SPI_Bus_FullDuplex;
	handle.Init.CPHA = SPI_CPHA_FIRST_EDGE;
	handle.Init.CPOL = SPI_CPOL_LOW;
	handle.Init.DFF_Format = SPI_DFF_8BITS;
	handle.Init.FrameFormat = SPI_FRAME_FORMAT_MSB;
	handle.Init.Mode = SPI_MODE_MASTER;
	handle.Init.SSM_Cmd = SPI_SSM_ENABLE;

	SPI_Init(&handle);
	SPI_PeriphCmd(&handle, ENABLE);
}

void SPI_GPIO_Config()
{
	/* PA4->NSS PA5->SCK PA6->MISO PA7->MOSI */

	GPIO_InitTypedef_t init = {0};

	init.pinNumber = GPIO_PIN_6 |GPIO_PIN_5 | GPIO_PIN_7 ;
	init.Mode = GPIO_MODE_AF;
	init.Otype = GPIO_OTYPE_PP;
	init.PuPd = GPIO_PUPD_NOPULL;
	init.Speed = GPIO_SPEED_VERY;
	init.Alternate = GPIO_AFSEL_5;

	GPIO_Init(GPIOA, &init);

}


///////////////////** 	SPI  *//////////////////////////////////////



#include "stm32l476xx.h"
#include "string.h"


static void GPIO_LedConfig();
static void GPIO_ButtonInterruptConfig();
static void SPI_Config();
static void SPI_GPIO_Config();

static SPI_HandleTypedef_t handle;


void EXTI15_10_IRQHandler()
{
	char msgToSend [] = "Hello Are you there\n";

	if( ( EXTI->PR1 & (1 << 13U) ) )
	{
		EXTI_Clear_Interrupt(EXTI_LineSource_13);
		//GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_Pin_Reset);
		SPI_TransmitData_IT(&handle, (uint8_t*)msgToSend, strlen(msgToSend));

		//SPI_TransmitData(&handle, (uint8_t*)msgToSend, strlen(msgToSend));
		//GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_Pin_Set);
	}
}
void SPI1_IRQHandler()
{
	SPI_InterruptHandler(&handle);
}

int main(void)
{

//PC13

	GPIO_LedConfig();

	GPIO_ButtonInterruptConfig();

	SPI_GPIO_Config();

	SPI_Config();

	while(1){;}

}
static void GPIO_LedConfig(){

	RCC_GPIOA_CLK_ENABLE();
	RCC_GPIOC_CLK_ENABLE();
	GPIO_InitTypedef_t GPIO_Led = {0};

	GPIO_Led.pinNumber = GPIO_PIN_4; /* GPIO PA4 NSS Pin config */
	GPIO_Led.Mode = GPIO_MODE_OUTPUT;
	GPIO_Led.Speed = GPIO_SPEED_LOW;
	GPIO_Led.Otype = GPIO_OTYPE_PP;
	GPIO_Led.PuPd = GPIO_PUPD_NOPULL;

	GPIO_Init(GPIOA, &GPIO_Led);


	memset(&GPIO_Led, 0, sizeof(GPIO_Led));

	GPIO_Led.pinNumber = GPIO_PIN_13; /* GPIO PC13 BUTTON CONFIG */
	GPIO_Led.Mode = GPIO_MODE_INPUT;
	GPIO_Led.PuPd = GPIO_PUPD_PULL_UP;
	GPIO_Init(GPIOC,&GPIO_Led);
}

static void GPIO_ButtonInterruptConfig()
{
	EXTI_InitTypedef_t EXTI_Init_t = {0};
	RCC_SYSCFG_CLK_ENABLE();
	EXTI_LineConfig(EXTI_Port_Source_GPIOC, EXTI_LineSource_13); /* GPIO PC13 Interrupt Config */

	EXTI_Init_t.EXTI_LineCmd = ENABLE;
	EXTI_Init_t.EXTI_LineNumber = EXTI_LineSource_13;
	EXTI_Init_t.EXTI_Mode = EXTI_MODE_Interrupt;
	EXTI_Init_t.TriggerSelection = EXTI_Trigger_Falling;

	EXTI_Init(&EXTI_Init_t);
	NVIC_EnableInterrupt(EXTI15_10_IRQNumber);
}

void SPI_Config(){

	handle.Instance = SPI1; /* PA4->NSS PA5->SCK PA6->MISO PA7->MOSI */
	RCC_SPI1_CLK_ENABLE();

	handle.Init.BaudRate = SPI_BAUDRATE_DIV_32;
	handle.Init.Bus_Config = SPI_Bus_FullDuplex;
	handle.Init.CPHA = SPI_CPHA_FIRST_EDGE;
	handle.Init.CPOL = SPI_CPOL_LOW;
	handle.Init.DFF_Format = SPI_DFF_8BITS;
	handle.Init.FrameFormat = SPI_FRAME_FORMAT_MSB;
	handle.Init.Mode = SPI_MODE_MASTER;
	handle.Init.SSM_Cmd = SPI_SSM_ENABLE;

	SPI_Init(&handle);
	NVIC_EnableInterrupt(SPI1_IRQNumber);
	SPI_PeriphCmd(&handle, ENABLE);
}

void SPI_GPIO_Config()
{
	/*
	 * PA4->NSS PA5->SCK PA6->MISO PA7->MOSI */
	/* PA4 USED FOR CS, GPIO OUTPUT,
	 * PA5 SCK AF OUTPUT PUSH PULL,
	 * PA6 MISO INPUT MODE(FLOATING)
	 * PA7 MOSI AF OUTPUT PUSH PULL
	 */
	GPIO_InitTypedef_t init = {0};

	init.pinNumber = GPIO_PIN_6 |GPIO_PIN_5 | GPIO_PIN_7 ;
	init.Mode = GPIO_MODE_AF;
	init.Otype = GPIO_OTYPE_PP;
	init.PuPd = GPIO_PUPD_NOPULL;
	init.Speed = GPIO_SPEED_VERY;
	init.Alternate = GPIO_AFSEL_5;

	GPIO_Init(GPIOA, &init);

}


/////////////////////////////// USART2 /////////////////////


#include "stm32l476xx.h"
#include "string.h"


static void GPIO_LedConfig();
/*
static void GPIO_ButtonInterruptConfig();
static void SPI_Config();
static void SPI_GPIO_Config();

*/

void USART_Config(void);
USART_HandleTypedef_t handle;


void USART2_IRQHandler()
{
	USART_InterruptHandler(&handle);
}

int main(void)
{

/* PA5*/
//PC13

	//GPIO_LedConfig();

	//GPIO_ButtonInterruptConfig();

	//SPI_GPIO_Config();

	//SPI_Config();
	char msg[] = "Hello world!\n";
	char buf[] = "";
	RCC->CFGR = (1<<0)|(1<<1)|(1<<2)|(1<<3);
	RCC->PLL_CFGR = (1<<24)|(1<<9)|(1<<11)|(1<<6)|(1<<1);

	RCC->CR |= (1<<24)|(1<<25)|(1<<8)|(1<<10);

	GPIO_LedConfig();
	USART_Config();
	USART_TransmitData(&handle, (uint8_t*)msg, strlen(msg));

	while(1){
		USART_ReceiveData(&handle, (uint8_t*)buf, 10);
		USART_TransmitData(&handle, (uint8_t*)buf, sizeof(buf));
	}

}

void USART_Config(void){

	RCC_USART2_CLK_ENABLE();

	handle.Instance = USART2;
	handle.Init.BaudRate = 115200;
	handle.Init.HardWareFlowControl = USART_HW_NONE;
	handle.Init.Mode = USART_MODE_Tx_Rx;
	handle.Init.OverSampling = USART_OVERSAMPLE_16;
	handle.Init.Parity = USART_PARITY_NONE;
	handle.Init.StopBits = USART_STOPBITS_ONE;
	handle.Init.WordLength = USART_WORDLENGTH_8Bits;

	USART_Init(&handle);
	//NVIC_EnableInterrupt(USART2_IRQNumber);
	USART_Periph_Cmd(&handle, ENABLE);
}
void GPIO_LedConfig()
{
	/*
	 * PA4->NSS PA5->SCK PA6->MISO PA7->MOSI */
	/* PA4 USED FOR CS, GPIO OUTPUT,
	 * PA5 SCK AF OUTPUT PUSH PULL,
	 * PA6 MISO INPUT MODE(FLOATING)
	 * PA7 MOSI AF OUTPUT PUSH PULL
	 */
	USART_Periph_Cmd(&handle, DISABLE);
	RCC_GPIOA_CLK_ENABLE();
	GPIO_InitTypedef_t init = {0};

	init.pinNumber = GPIO_PIN_2;
	init.Mode = GPIO_MODE_AF;
	init.Otype = GPIO_OTYPE_PP;
	init.PuPd = GPIO_PUPD_NOPULL;
	init.Speed = GPIO_SPEED_VERY;
	init.Alternate = GPIO_AFSEL_7;

	GPIO_Init(GPIOA, &init);

}


//////////////// INTERRUPT METHOD /////////////

#include "stm32l476xx.h"
#include "string.h"


static void GPIO_LedConfig();
/*
static void GPIO_ButtonInterruptConfig();
static void SPI_Config();
static void SPI_GPIO_Config();

*/

void USART_Config(void);
USART_HandleTypedef_t handle;


void USART2_IRQHandler()
{
	USART_InterruptHandler(&handle);
}

int main(void)
{

/* PA5*/
//PC13

	//GPIO_LedConfig();

	//GPIO_ButtonInterruptConfig();

	//SPI_GPIO_Config();

	//SPI_Config();
	char msg[] = "Hello world!\n";

	RCC->CFGR = (1<<0)|(1<<1)|(1<<2)|(1<<3);
	RCC->PLL_CFGR = (1<<24)|(1<<9)|(1<<11)|(1<<6)|(1<<1);

	RCC->CR |= (1<<24)|(1<<25)|(1<<8)|(1<<10);

	GPIO_LedConfig();
	USART_Config();
	USART_TransmitData_IT(&handle, (uint8_t*)msg, strlen(msg));

	while(1){
		;
	}

}

void USART_Config(void){

	RCC_USART2_CLK_ENABLE();

	handle.Instance = USART2;
	handle.Init.BaudRate = 115200;
	handle.Init.HardWareFlowControl = USART_HW_NONE;
	handle.Init.Mode = USART_MODE_Tx_Rx;
	handle.Init.OverSampling = USART_OVERSAMPLE_16;
	handle.Init.Parity = USART_PARITY_NONE;
	handle.Init.StopBits = USART_STOPBITS_ONE;
	handle.Init.WordLength = USART_WORDLENGTH_8Bits;

	USART_Init(&handle);
	NVIC_EnableInterrupt(USART2_IRQNumber);
	USART_Periph_Cmd(&handle, ENABLE);
}
void GPIO_LedConfig()
{
	/*
	 * PA4->NSS PA5->SCK PA6->MISO PA7->MOSI */
	/* PA4 USED FOR CS, GPIO OUTPUT,
	 * PA5 SCK AF OUTPUT PUSH PULL,
	 * PA6 MISO INPUT MODE(FLOATING)
	 * PA7 MOSI AF OUTPUT PUSH PULL
	 */
	USART_Periph_Cmd(&handle, DISABLE);
	RCC_GPIOA_CLK_ENABLE();
	GPIO_InitTypedef_t init = {0};

	init.pinNumber = GPIO_PIN_2;
	init.Mode = GPIO_MODE_AF;
	init.Otype = GPIO_OTYPE_PP;
	init.PuPd = GPIO_PUPD_NOPULL;
	init.Speed = GPIO_SPEED_VERY;
	init.Alternate = GPIO_AFSEL_7;

	GPIO_Init(GPIOA, &init);

}

